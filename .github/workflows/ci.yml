name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify installation
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Workspaces found:"
        npm run --workspaces --if-present --silent list
        
    - name: Build shared package
      run: npm run build --workspace=shared
      
    - name: TypeScript checks
      run: npm run typecheck
      
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.test.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build shared package
      run: npm run build --workspace=shared
      
    - name: Build client for production
      run: npm run build --workspace=client
      
    - name: Deploy to Vercel
      working-directory: packages/client
      run: |
        npm install -g vercel
        mkdir -p .vercel
        echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json
        vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes

  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    steps:
    - name: Notify Slack on deployment success
      if: needs.test.result == 'success' && needs.deploy.result == 'success'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üöÄ *Deployed to Production*\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Commit: `${{ github.sha }}`\n‚Ä¢ Author: ${{ github.actor }}\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on test success only
      if: needs.test.result == 'success' && needs.deploy.result == 'skipped'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚úÖ *CI Pipeline Success*\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Commit: `${{ github.sha }}`\n‚Ä¢ Author: ${{ github.actor }}\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on deployment failure
      if: needs.test.result == 'success' && needs.deploy.result == 'failure'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚ùå *Deployment Failed*\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Commit: `${{ github.sha }}`\n‚Ä¢ Author: ${{ github.actor }}\n‚Ä¢ Tests passed but deployment failed\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on test failure
      if: needs.test.result == 'failure'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚ùå *CI Pipeline Failed*\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Commit: `${{ github.sha }}`\n‚Ä¢ Author: ${{ github.actor }}\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}